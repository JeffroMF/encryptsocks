'use strict';

exports.__esModule = true;
exports.LOG_NAMES = undefined;
exports.createLogger = createLogger;

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _path = require('path');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LOG_NAMES = exports.LOG_NAMES = {
  LOCAL: 'local.log',
  SERVER: 'server.log',
  DAEMON: 'daemon.log'
};

var DEFAULT_LEVEL = 'warn';
var DEFAULT_COMMON_OPTIONS = {
  colorize: true,
  timestamp: true
};

// TODO: to be refactored
function createLogData(level, filename, willLogToConsole, notLogToFile) {
  var transports = [];

  if (filename && !notLogToFile) {
    transports.push(new _winston2.default.transports.File(Object.assign(DEFAULT_COMMON_OPTIONS, {
      level: level,
      filename: filename
    })));
  }

  if (willLogToConsole) {
    transports.push(new _winston2.default.transports.Console(Object.assign(DEFAULT_COMMON_OPTIONS, {
      level: level
    })));
  }

  return {
    transports: transports
  };
}

function createLogger(proxyOptions, logName) {
  var willLogToConsole = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var notLogToFile = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var _ref = proxyOptions || {},
      _ref$level = _ref.level,
      level = _ref$level === undefined ? DEFAULT_LEVEL : _ref$level,
      logPath = _ref.logPath;

  if (logPath) {
    (0, _utils.mkdirIfNotExistSync)(logPath);
  }

  var fileName = logPath ? (0, _path.resolve)(logPath, logName) : null;
  return new _winston2.default.Logger(createLogData(level, fileName, willLogToConsole, notLogToFile));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2dnZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlTG9nZ2VyIiwiTE9HX05BTUVTIiwiTE9DQUwiLCJTRVJWRVIiLCJEQUVNT04iLCJERUZBVUxUX0xFVkVMIiwiREVGQVVMVF9DT01NT05fT1BUSU9OUyIsImNvbG9yaXplIiwidGltZXN0YW1wIiwiY3JlYXRlTG9nRGF0YSIsImxldmVsIiwiZmlsZW5hbWUiLCJ3aWxsTG9nVG9Db25zb2xlIiwibm90TG9nVG9GaWxlIiwidHJhbnNwb3J0cyIsInB1c2giLCJGaWxlIiwiT2JqZWN0IiwiYXNzaWduIiwiQ29uc29sZSIsInByb3h5T3B0aW9ucyIsImxvZ05hbWUiLCJsb2dQYXRoIiwiZmlsZU5hbWUiLCJMb2dnZXIiXSwibWFwcGluZ3MiOiI7Ozs7UUE0Q2dCQSxZLEdBQUFBLFk7O0FBNUNoQjs7OztBQUNBOztBQUNBOzs7O0FBRU8sSUFBTUMsZ0NBQVk7QUFDdkJDLFNBQU8sV0FEZ0I7QUFFdkJDLFVBQVEsWUFGZTtBQUd2QkMsVUFBUTtBQUhlLENBQWxCOztBQU1QLElBQU1DLGdCQUFnQixNQUF0QjtBQUNBLElBQU1DLHlCQUF5QjtBQUM3QkMsWUFBVSxJQURtQjtBQUU3QkMsYUFBVztBQUZrQixDQUEvQjs7QUFLQTtBQUNBLFNBQVNDLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQThCQyxRQUE5QixFQUF3Q0MsZ0JBQXhDLEVBQTBEQyxZQUExRCxFQUF3RTtBQUN0RSxNQUFNQyxhQUFhLEVBQW5COztBQUVBLE1BQUlILFlBQVksQ0FBQ0UsWUFBakIsRUFBK0I7QUFDN0JDLGVBQVdDLElBQVgsQ0FDRSxJQUFJLGtCQUFRRCxVQUFSLENBQW1CRSxJQUF2QixDQUE0QkMsT0FBT0MsTUFBUCxDQUMxQlosc0JBRDBCLEVBQ0Y7QUFDdEJJLGtCQURzQjtBQUV0QkM7QUFGc0IsS0FERSxDQUE1QixDQURGO0FBUUQ7O0FBRUQsTUFBSUMsZ0JBQUosRUFBc0I7QUFDcEJFLGVBQVdDLElBQVgsQ0FDRSxJQUFJLGtCQUFRRCxVQUFSLENBQW1CSyxPQUF2QixDQUErQkYsT0FBT0MsTUFBUCxDQUFjWixzQkFBZCxFQUFzQztBQUNuRUk7QUFEbUUsS0FBdEMsQ0FBL0IsQ0FERjtBQUtEOztBQUVELFNBQU87QUFDTEk7QUFESyxHQUFQO0FBR0Q7O0FBRU0sU0FBU2QsWUFBVCxDQUNMb0IsWUFESyxFQUVMQyxPQUZLLEVBS0w7QUFBQSxNQUZBVCxnQkFFQSx1RUFGbUIsS0FFbkI7QUFBQSxNQURBQyxZQUNBLHVFQURlLEtBQ2Y7O0FBQUEsYUFDNENPLGdCQUFnQixFQUQ1RDtBQUFBLHdCQUNRVixLQURSO0FBQUEsTUFDUUEsS0FEUiw4QkFDZ0JMLGFBRGhCO0FBQUEsTUFDK0JpQixPQUQvQixRQUMrQkEsT0FEL0I7O0FBR0EsTUFBSUEsT0FBSixFQUFhO0FBQ1gsb0NBQW9CQSxPQUFwQjtBQUNEOztBQUVELE1BQU1DLFdBQVdELFVBQVUsbUJBQVFBLE9BQVIsRUFBaUJELE9BQWpCLENBQVYsR0FBc0MsSUFBdkQ7QUFDQSxTQUFPLElBQUksa0JBQVFHLE1BQVosQ0FBbUJmLGNBQ3hCQyxLQUR3QixFQUNqQmEsUUFEaUIsRUFDUFgsZ0JBRE8sRUFDV0MsWUFEWCxDQUFuQixDQUFQO0FBR0QiLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdpbnN0b24gZnJvbSAnd2luc3Rvbic7XG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBta2RpcklmTm90RXhpc3RTeW5jIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBMT0dfTkFNRVMgPSB7XG4gIExPQ0FMOiAnbG9jYWwubG9nJyxcbiAgU0VSVkVSOiAnc2VydmVyLmxvZycsXG4gIERBRU1PTjogJ2RhZW1vbi5sb2cnLFxufTtcblxuY29uc3QgREVGQVVMVF9MRVZFTCA9ICd3YXJuJztcbmNvbnN0IERFRkFVTFRfQ09NTU9OX09QVElPTlMgPSB7XG4gIGNvbG9yaXplOiB0cnVlLFxuICB0aW1lc3RhbXA6IHRydWUsXG59O1xuXG4vLyBUT0RPOiB0byBiZSByZWZhY3RvcmVkXG5mdW5jdGlvbiBjcmVhdGVMb2dEYXRhKGxldmVsLCBmaWxlbmFtZSwgd2lsbExvZ1RvQ29uc29sZSwgbm90TG9nVG9GaWxlKSB7XG4gIGNvbnN0IHRyYW5zcG9ydHMgPSBbXTtcblxuICBpZiAoZmlsZW5hbWUgJiYgIW5vdExvZ1RvRmlsZSkge1xuICAgIHRyYW5zcG9ydHMucHVzaChcbiAgICAgIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuRmlsZShPYmplY3QuYXNzaWduKFxuICAgICAgICBERUZBVUxUX0NPTU1PTl9PUFRJT05TLCB7XG4gICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgIH1cbiAgICAgICkpXG4gICAgKTtcbiAgfVxuXG4gIGlmICh3aWxsTG9nVG9Db25zb2xlKSB7XG4gICAgdHJhbnNwb3J0cy5wdXNoKFxuICAgICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKE9iamVjdC5hc3NpZ24oREVGQVVMVF9DT01NT05fT1BUSU9OUywge1xuICAgICAgICBsZXZlbCxcbiAgICAgIH0pKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRyYW5zcG9ydHMsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dnZXIoXG4gIHByb3h5T3B0aW9ucyxcbiAgbG9nTmFtZSxcbiAgd2lsbExvZ1RvQ29uc29sZSA9IGZhbHNlLFxuICBub3RMb2dUb0ZpbGUgPSBmYWxzZSxcbikge1xuICBjb25zdCB7IGxldmVsID0gREVGQVVMVF9MRVZFTCwgbG9nUGF0aCB9ID0gKHByb3h5T3B0aW9ucyB8fCB7fSk7XG5cbiAgaWYgKGxvZ1BhdGgpIHtcbiAgICBta2RpcklmTm90RXhpc3RTeW5jKGxvZ1BhdGgpO1xuICB9XG5cbiAgY29uc3QgZmlsZU5hbWUgPSBsb2dQYXRoID8gcmVzb2x2ZShsb2dQYXRoLCBsb2dOYW1lKSA6IG51bGw7XG4gIHJldHVybiBuZXcgd2luc3Rvbi5Mb2dnZXIoY3JlYXRlTG9nRGF0YShcbiAgICBsZXZlbCwgZmlsZU5hbWUsIHdpbGxMb2dUb0NvbnNvbGUsIG5vdExvZ1RvRmlsZSxcbiAgKSk7XG59XG4iXX0=