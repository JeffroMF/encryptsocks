'use strict';

exports.__esModule = true;
exports.getParamLength = getParamLength;
exports.generateKey = generateKey;
exports.createCipher = createCipher;
exports.createDecipher = createDecipher;
exports.encrypt = encrypt;
exports.decrypt = decrypt;

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hasOwnProperty = {}.hasOwnProperty;

// directly exported from the original nodejs implementation
var cryptoParamLength = {
  'aes-128-cfb': [16, 16],
  'aes-192-cfb': [24, 16],
  'aes-256-cfb': [32, 16],
  'bf-cfb': [16, 8],
  'camellia-128-cfb': [16, 16],
  'camellia-192-cfb': [24, 16],
  'camellia-256-cfb': [32, 16],
  'cast5-cfb': [16, 8],
  'des-cfb': [8, 8],
  'idea-cfb': [16, 8],
  'rc2-cfb': [16, 8],
  rc4: [16, 0],
  'rc4-md5': [16, 16],
  'seed-cfb': [16, 16]
};

var keyCache = {};

function getParamLength(methodName) {
  return cryptoParamLength[methodName];
}

function getMD5Hash(data) {
  return _crypto2.default.createHash('md5').update(data).digest();
}

function generateKey(methodName, secret) {
  var secretBuf = new Buffer(secret, 'utf8');
  var tokens = [];
  var keyLength = getParamLength(methodName)[0];
  var cacheIndex = methodName + '_' + secret;

  var i = 0;
  var hash = void 0;
  var length = 0;

  if (hasOwnProperty.call(keyCache, cacheIndex)) {
    return keyCache[cacheIndex];
  }

  if (!keyLength) {
    // TODO: catch error
    throw new Error('unsupported method');
  }

  while (length < keyLength) {
    hash = getMD5Hash(i === 0 ? secretBuf : Buffer.concat([tokens[i - 1], secretBuf]));
    tokens.push(hash);
    i += 1;
    length += hash.length;
  }

  hash = Buffer.concat(tokens).slice(0, keyLength);

  keyCache[cacheIndex] = hash;

  return hash;
}

function createCipher(secret, methodName, initialData, _iv) {
  var key = generateKey(methodName, secret);
  var iv = _iv || _crypto2.default.randomBytes(getParamLength(methodName)[1]);
  var cipher = _crypto2.default.createCipheriv(methodName, key, iv);

  return {
    cipher: cipher,
    data: Buffer.concat([iv, cipher.update(initialData)])
  };
}

function createDecipher(secret, methodName, initialData) {
  var ivLength = getParamLength(methodName)[1];
  var iv = initialData.slice(0, ivLength);

  if (iv.length !== ivLength) {
    return null;
  }

  var key = generateKey(methodName, secret);
  var decipher = _crypto2.default.createDecipheriv(methodName, key, iv);
  var data = decipher.update(initialData.slice(ivLength));

  return {
    decipher: decipher,
    data: data
  };
}

function encrypt(secret, methodName, data, _iv) {
  return createCipher(secret, methodName, data, _iv).data;
}

function decrypt(secret, methodName, data) {
  return createDecipher(secret, methodName, data).data;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbmNyeXB0b3IuanMiXSwibmFtZXMiOlsiZ2V0UGFyYW1MZW5ndGgiLCJnZW5lcmF0ZUtleSIsImNyZWF0ZUNpcGhlciIsImNyZWF0ZURlY2lwaGVyIiwiZW5jcnlwdCIsImRlY3J5cHQiLCJoYXNPd25Qcm9wZXJ0eSIsImNyeXB0b1BhcmFtTGVuZ3RoIiwicmM0Iiwia2V5Q2FjaGUiLCJtZXRob2ROYW1lIiwiZ2V0TUQ1SGFzaCIsImRhdGEiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0Iiwic2VjcmV0Iiwic2VjcmV0QnVmIiwiQnVmZmVyIiwidG9rZW5zIiwia2V5TGVuZ3RoIiwiY2FjaGVJbmRleCIsImkiLCJoYXNoIiwibGVuZ3RoIiwiY2FsbCIsIkVycm9yIiwiY29uY2F0IiwicHVzaCIsInNsaWNlIiwiaW5pdGlhbERhdGEiLCJfaXYiLCJrZXkiLCJpdiIsInJhbmRvbUJ5dGVzIiwiY2lwaGVyIiwiY3JlYXRlQ2lwaGVyaXYiLCJpdkxlbmd0aCIsImRlY2lwaGVyIiwiY3JlYXRlRGVjaXBoZXJpdiJdLCJtYXBwaW5ncyI6Ijs7O1FBd0JnQkEsYyxHQUFBQSxjO1FBUUFDLFcsR0FBQUEsVztRQWlDQUMsWSxHQUFBQSxZO1FBV0FDLGMsR0FBQUEsYztRQWtCQUMsTyxHQUFBQSxPO1FBSUFDLE8sR0FBQUEsTzs7QUFsR2hCOzs7Ozs7QUFFQSxJQUFNQyxpQkFBaUIsR0FBR0EsY0FBMUI7O0FBRUE7QUFDQSxJQUFNQyxvQkFBb0I7QUFDeEIsaUJBQWUsQ0FBQyxFQUFELEVBQUssRUFBTCxDQURTO0FBRXhCLGlCQUFlLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FGUztBQUd4QixpQkFBZSxDQUFDLEVBQUQsRUFBSyxFQUFMLENBSFM7QUFJeEIsWUFBVSxDQUFDLEVBQUQsRUFBSyxDQUFMLENBSmM7QUFLeEIsc0JBQW9CLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FMSTtBQU14QixzQkFBb0IsQ0FBQyxFQUFELEVBQUssRUFBTCxDQU5JO0FB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LENBQTNCLENBQWpCO0FBQ0EsTUFBTXVCLEtBQUtILFlBQVlELEtBQVosQ0FBa0IsQ0FBbEIsRUFBcUJRLFFBQXJCLENBQVg7O0FBRUEsTUFBSUosR0FBR1QsTUFBSCxLQUFjYSxRQUFsQixFQUE0QjtBQUMxQixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFNTCxNQUFNL0IsWUFBWVMsVUFBWixFQUF3Qk0sTUFBeEIsQ0FBWjtBQUNBLE1BQU1zQixXQUFXLGlCQUFPQyxnQkFBUCxDQUF3QjdCLFVBQXhCLEVBQW9Dc0IsR0FBcEMsRUFBeUNDLEVBQXpDLENBQWpCO0FBQ0EsTUFBTXJCLE9BQU8wQixTQUFTeEIsTUFBVCxDQUFnQmdCLFlBQVlELEtBQVosQ0FBa0JRLFFBQWxCLENBQWhCLENBQWI7O0FBRUEsU0FBTztBQUNMQyxzQkFESztBQUVMMUI7QUFGSyxHQUFQO0FBSUQ7O0FBRU0sU0FBU1IsT0FBVCxDQUFpQlksTUFBakIsRUFBeUJOLFVBQXpCLEVBQXFDRSxJQUFyQyxFQUEyQ21CLEdBQTNDLEVBQWdEO0FBQ3JELFNBQU83QixhQUFhYyxNQUFiLEVBQXFCTixVQUFyQixFQUFpQ0UsSUFBakMsRUFBdUNtQixHQUF2QyxFQUE0Q25CLElBQW5EO0FBQ0Q7O0FBRU0sU0FBU1AsT0FBVCxDQUFpQlcsTUFBakIsRUFBeUJOLFVBQXpCLEVBQXFDRSxJQUFyQyxFQUEyQztBQUNoRCxTQUFPVCxlQUFlYSxNQUFmLEVBQXVCTixVQUF2QixFQUFtQ0UsSUFBbkMsRUFBeUNBLElBQWhEO0FBQ0QiLCJmaWxlIjoiZW5jcnlwdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4vLyBkaXJlY3RseSBleHBvcnRlZCBmcm9tIHRoZSBvcmlnaW5hbCBub2RlanMgaW1wbGVtZW50YXRpb25cbmNvbnN0IGNyeXB0b1BhcmFtTGVuZ3RoID0ge1xuICAnYWVzLTEyOC1jZmInOiBbMTYsIDE2XSxcbiAgJ2Flcy0xOTItY2ZiJzogWzI0LCAxNl0sXG4gICdhZXMtMjU2LWNmYic6IFszMiwgMTZdLFxuICAnYmYtY2ZiJzogWzE2LCA4XSxcbiAgJ2NhbWVsbGlhLTEyOC1jZmInOiBbMTYsIDE2XSxcbiAgJ2NhbWVsbGlhLTE5Mi1jZmInOiBbMjQsIDE2XSxcbiAgJ2NhbWVsbGlhLTI1Ni1jZmInOiBbMzIsIDE2XSxcbiAgJ2Nhc3Q1LWNmYic6IFsxNiwgOF0sXG4gICdkZXMtY2ZiJzogWzgsIDhdLFxuICAnaWRlYS1jZmInOiBbMTYsIDhdLFxuICAncmMyLWNmYic6IFsxNiwgOF0sXG4gIHJjNDogWzE2LCAwXSxcbiAgJ3JjNC1tZDUnOiBbMTYsIDE2XSxcbiAgJ3NlZWQtY2ZiJzogWzE2LCAxNl0sXG59O1xuXG5jb25zdCBrZXlDYWNoZSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyYW1MZW5ndGgobWV0aG9kTmFtZSkge1xuICByZXR1cm4gY3J5cHRvUGFyYW1MZW5ndGhbbWV0aG9kTmFtZV07XG59XG5cbmZ1bmN0aW9uIGdldE1ENUhhc2goZGF0YSkge1xuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlS2V5KG1ldGhvZE5hbWUsIHNlY3JldCkge1xuICBjb25zdCBzZWNyZXRCdWYgPSBuZXcgQnVmZmVyKHNlY3JldCwgJ3V0ZjgnKTtcbiAgY29uc3QgdG9rZW5zID0gW107XG4gIGNvbnN0IGtleUxlbmd0aCA9IGdldFBhcmFtTGVuZ3RoKG1ldGhvZE5hbWUpWzBdO1xuICBjb25zdCBjYWNoZUluZGV4ID0gYCR7bWV0aG9kTmFtZX1fJHtzZWNyZXR9YDtcblxuICBsZXQgaSA9IDA7XG4gIGxldCBoYXNoO1xuICBsZXQgbGVuZ3RoID0gMDtcblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChrZXlDYWNoZSwgY2FjaGVJbmRleCkpIHtcbiAgICByZXR1cm4ga2V5Q2FjaGVbY2FjaGVJbmRleF07XG4gIH1cblxuICBpZiAoIWtleUxlbmd0aCkge1xuICAgIC8vIFRPRE86IGNhdGNoIGVycm9yXG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBtZXRob2QnKTtcbiAgfVxuXG4gIHdoaWxlIChsZW5ndGggPCBrZXlMZW5ndGgpIHtcbiAgICBoYXNoID0gZ2V0TUQ1SGFzaCgoaSA9PT0gMCkgPyBzZWNyZXRCdWYgOiBCdWZmZXIuY29uY2F0KFt0b2tlbnNbaSAtIDFdLCBzZWNyZXRCdWZdKSk7XG4gICAgdG9rZW5zLnB1c2goaGFzaCk7XG4gICAgaSArPSAxO1xuICAgIGxlbmd0aCArPSBoYXNoLmxlbmd0aDtcbiAgfVxuXG4gIGhhc2ggPSBCdWZmZXIuY29uY2F0KHRva2Vucykuc2xpY2UoMCwga2V5TGVuZ3RoKTtcblxuICBrZXlDYWNoZVtjYWNoZUluZGV4XSA9IGhhc2g7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDaXBoZXIoc2VjcmV0LCBtZXRob2ROYW1lLCBpbml0aWFsRGF0YSwgX2l2KSB7XG4gIGNvbnN0IGtleSA9IGdlbmVyYXRlS2V5KG1ldGhvZE5hbWUsIHNlY3JldCk7XG4gIGNvbnN0IGl2ID0gX2l2IHx8IGNyeXB0by5yYW5kb21CeXRlcyhnZXRQYXJhbUxlbmd0aChtZXRob2ROYW1lKVsxXSk7XG4gIGNvbnN0IGNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdihtZXRob2ROYW1lLCBrZXksIGl2KTtcblxuICByZXR1cm4ge1xuICAgIGNpcGhlcixcbiAgICBkYXRhOiBCdWZmZXIuY29uY2F0KFtpdiwgY2lwaGVyLnVwZGF0ZShpbml0aWFsRGF0YSldKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyKHNlY3JldCwgbWV0aG9kTmFtZSwgaW5pdGlhbERhdGEpIHtcbiAgY29uc3QgaXZMZW5ndGggPSBnZXRQYXJhbUxlbmd0aChtZXRob2ROYW1lKVsxXTtcbiAgY29uc3QgaXYgPSBpbml0aWFsRGF0YS5zbGljZSgwLCBpdkxlbmd0aCk7XG5cbiAgaWYgKGl2Lmxlbmd0aCAhPT0gaXZMZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGtleSA9IGdlbmVyYXRlS2V5KG1ldGhvZE5hbWUsIHNlY3JldCk7XG4gIGNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYobWV0aG9kTmFtZSwga2V5LCBpdik7XG4gIGNvbnN0IGRhdGEgPSBkZWNpcGhlci51cGRhdGUoaW5pdGlhbERhdGEuc2xpY2UoaXZMZW5ndGgpKTtcblxuICByZXR1cm4ge1xuICAgIGRlY2lwaGVyLFxuICAgIGRhdGEsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNyeXB0KHNlY3JldCwgbWV0aG9kTmFtZSwgZGF0YSwgX2l2KSB7XG4gIHJldHVybiBjcmVhdGVDaXBoZXIoc2VjcmV0LCBtZXRob2ROYW1lLCBkYXRhLCBfaXYpLmRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNyeXB0KHNlY3JldCwgbWV0aG9kTmFtZSwgZGF0YSkge1xuICByZXR1cm4gY3JlYXRlRGVjaXBoZXIoc2VjcmV0LCBtZXRob2ROYW1lLCBkYXRhKS5kYXRhO1xufVxuIl19